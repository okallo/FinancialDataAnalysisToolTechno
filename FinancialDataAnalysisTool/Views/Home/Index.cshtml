@model DataViewModel

@{
    ViewBag.Title = "Stock Data";
}

<h2>Stock Data</h2>

<div>
    <label for="symbol">Symbol:</label>
    <select id="symbol">
        @foreach (var symbol in Model.Symbols)
        {
            <option value="@symbol">@symbol</option>
        }
    </select>
</div>
<div class="row">
    <div class="col-md-6">
        <label for="startDate">Start Date:</label>
        <input type="text" id="startDate" placeholder="01/03/2000" />
    </div>

    <div class="col-md-6">
        <label for="endDate">End Date:</label>
        <input type="text" id="endDate" placeholder="01/24/2018" />
    </div>

</div>
<div class="d-flex text-right">
    <button onclick="filterByTime()">Filter by Time</button>
    <button onclick="filterBySymbol()">Filter by Symbol</button>
</div>
<div class="row">
    <div class="col-md-8">
        <table id="stockPricesTable">
            <thead>
                <tr>
                    <th>Symbol</th>
                    <th>Date</th>
                    <th>Open</th>
                    <th>High</th>
                    <th>Low</th>
                    <th>Close</th>
                    <th>Close Adjusted</th>
                    <th>Volume</th>
                    <th>Split Coefficient</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var stock in Model.StockPrices)
                {
                    <tr>
                        <td>@stock.Symbol</td>
                        <td>@stock.Date.ToString("MM/dd/yyyy");</td>
                        <td>@stock.Open</td>
                        <td>@stock.High</td>
                        <td>@stock.Low</td>
                        <td>@stock.Close</td>
                        <td>@stock.CloseAdjusted</td>
                        <td>@stock.Volume</td>
                        <td>@stock.SplitCoefficient</td>
                    </tr>
                }
                <!-- Stock price data will be dynamically populated here -->
            </tbody>
        </table>

    </div>
    <div class="col-md-4">
        <div id="chartContainer">
            @await Component.InvokeAsync("Chart")
        </div>

    </div>
</div>
 <!-- DataTables JavaScript -->
    @* <script type="text/javascript" src="https://code.jquery.com/jquery-3.6.0.min.js"></script> *@
 
@section scripts {
 <script type="text/javascript"
        src="https://cdn.datatables.net/v/your_version/jquery.dataTables.min.js"></script>
   
        
    <script>
        @* $(document).ready(function() {
            $('#stockPricesTable').DataTable({
                ajax: {
                    url: '/Home/LoadStockPricesData', 
                    dataSrc: '' // Use an empty string since the data is returned as an array
                },
                columns: [
                    { data: 'symbol' },
                    { data: 'date' },
                    { data: 'open' },
                    { data: 'high' },
                    { data: 'low' },
                    { data: 'close' },
                    { data: 'closeAdjusted' },
                    { data: 'volume' },
                    { data: 'splitCoefficient' }
                ]
            });
        }); *@


                function filterByTime() {
                    var symbol = $('#symbol').val();
                    var startDate = $('#startDate').val();
                    var endDate = $('#endDate').val();

                    $.ajax({
                        url: '@Url.Action("FilterByTime")',
                        type: 'POST',
                        data: {
                            symbol: symbol,
                            startDate: startDate,
                            endDate: endDate
                        },
                        success: function (data) {
                            // Update the chart with the filtered data
                            console.log(data);
                            var chartCanvas = document.getElementById('chartCanvas');
                            var chart = Chart.getChart(chartCanvas);
                            chart.data.datasets = data;
                            chart.update();
                        }
                    });
                }

                function filterBySymbol() {
                    var symbols = $('#symbol').val();

                    $.ajax({
                        url: '@Url.Action("FilterBySymbol")',
                        type: 'POST',
                        data: {
                            symbols: symbols
                        },
                        success: function (data) {
                            // Update the chart with the filtered data
                            var chartCanvas = document.getElementById('chartCanvas');
                            var chart = Chart.getChart(chartCanvas);
                            chart.data.datasets = data;
                            chart.update();
                        }
                    });
                }
            </script>
}
